// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace PanelCodedUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddDoubles
        /// </summary>
        public void AddDoubles()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UISpreadsheetGUIexeShoListItem.UINameEdit;
            WinEdit uITextBox3Edit = this.UIForm1Window.UITextBox3Window.UITextBox3Edit;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(124, 9));

            // Type '5' in 'textBox3' text box
            uITextBox3Edit.Text = this.AddDoublesParams.UITextBox3EditText;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.AddDoublesParams.UITextBox3EditSendKeys, ModifierKeys.None);

            // Type '4' in 'textBox3' text box
            uITextBox3Edit.Text = this.AddDoublesParams.UITextBox3EditText1;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.AddDoublesParams.UITextBox3EditSendKeys1, ModifierKeys.None);

            // Type '3' in 'textBox3' text box
            uITextBox3Edit.Text = this.AddDoublesParams.UITextBox3EditText2;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.AddDoublesParams.UITextBox3EditSendKeys2, ModifierKeys.None);

            // Type '2' in 'textBox3' text box
            uITextBox3Edit.Text = this.AddDoublesParams.UITextBox3EditText3;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.AddDoublesParams.UITextBox3EditSendKeys3, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(77, 42));
        }
        
        /// <summary>
        /// Assert that A1 is 5
        /// </summary>
        public void AssertDoubles1()
        {
            #region Variable Declarations
            WinEdit uITextBox3Edit = this.UIForm1Window.UITextBox3Window.UITextBox3Edit;
            #endregion

            // Verify that the 'SelectionText' property of 'textBox3' text box equals '5'
            Assert.AreEqual(this.AssertDoubles1ExpectedValues.UITextBox3EditSelectionText, uITextBox3Edit.SelectionText, "Why isn\'t it 5, dummy?");
        }
        
        /// <summary>
        /// Assert that A2 is 4
        /// </summary>
        public void AssertDoubles2()
        {
            #region Variable Declarations
            WinEdit uITextBox3Edit = this.UIForm1Window.UITextBox3Window.UITextBox3Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox3' text box equals '4'
            Assert.AreEqual(this.AssertDoubles2ExpectedValues.UITextBox3EditText, uITextBox3Edit.Text, "Why isn\'t it 4, dummy?");
        }
        
        /// <summary>
        /// Close spreadsheet after doubles
        /// </summary>
        public void CloseDoubles()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            WinButton uINOButton = this.UIWarningUnsavedchangeWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(14, 9));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(31, 11));
        }
        
        #region Properties
        public virtual AddDoublesParams AddDoublesParams
        {
            get
            {
                if ((this.mAddDoublesParams == null))
                {
                    this.mAddDoublesParams = new AddDoublesParams();
                }
                return this.mAddDoublesParams;
            }
        }
        
        public virtual AssertDoubles1ExpectedValues AssertDoubles1ExpectedValues
        {
            get
            {
                if ((this.mAssertDoubles1ExpectedValues == null))
                {
                    this.mAssertDoubles1ExpectedValues = new AssertDoubles1ExpectedValues();
                }
                return this.mAssertDoubles1ExpectedValues;
            }
        }
        
        public virtual AssertDoubles2ExpectedValues AssertDoubles2ExpectedValues
        {
            get
            {
                if ((this.mAssertDoubles2ExpectedValues == null))
                {
                    this.mAssertDoubles2ExpectedValues = new AssertDoubles2ExpectedValues();
                }
                return this.mAssertDoubles2ExpectedValues;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIWarningUnsavedchangeWindow UIWarningUnsavedchangeWindow
        {
            get
            {
                if ((this.mUIWarningUnsavedchangeWindow == null))
                {
                    this.mUIWarningUnsavedchangeWindow = new UIWarningUnsavedchangeWindow();
                }
                return this.mUIWarningUnsavedchangeWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddDoublesParams mAddDoublesParams;
        
        private AssertDoubles1ExpectedValues mAssertDoubles1ExpectedValues;
        
        private AssertDoubles2ExpectedValues mAssertDoubles2ExpectedValues;
        
        private UIForm1Window mUIForm1Window;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIWarningUnsavedchangeWindow mUIWarningUnsavedchangeWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddDoubles'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AddDoublesParams
    {
        
        #region Fields
        /// <summary>
        /// Type '5' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '4' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText1 = "4";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText3 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDoubles1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertDoubles1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'SelectionText' property of 'textBox3' text box equals '5'
        /// </summary>
        public string UITextBox3EditSelectionText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDoubles2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertDoubles2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox3' text box equals '4'
        /// </summary>
        public string UITextBox3EditText = "4";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UITextBox3Window UITextBox3Window
        {
            get
            {
                if ((this.mUITextBox3Window == null))
                {
                    this.mUITextBox3Window = new UITextBox3Window(this);
                }
                return this.mUITextBox3Window;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIForm1TitleBar UIForm1TitleBar
        {
            get
            {
                if ((this.mUIForm1TitleBar == null))
                {
                    this.mUIForm1TitleBar = new UIForm1TitleBar(this);
                }
                return this.mUIForm1TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UITextBox3Window mUITextBox3Window;
        
        private UIItemWindow mUIItemWindow;
        
        private UIForm1TitleBar mUIForm1TitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIExitMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITextBox3Window : WinWindow
    {
        
        public UITextBox3Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox3";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox3Edit
        {
            get
            {
                if ((this.mUITextBox3Edit == null))
                {
                    this.mUITextBox3Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox3Edit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUITextBox3Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox3Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIForm1TitleBar : WinTitleBar
    {
        
        public UIForm1TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetGUIexeShoListItem UISpreadsheetGUIexeShoListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIexeShoListItem == null))
                {
                    this.mUISpreadsheetGUIexeShoListItem = new UISpreadsheetGUIexeShoListItem(this);
                }
                return this.mUISpreadsheetGUIexeShoListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetGUIexeShoListItem mUISpreadsheetGUIexeShoListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISpreadsheetGUIexeShoListItem : WinListItem
    {
        
        public UISpreadsheetGUIexeShoListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI.exe - Shortcut";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIWarningUnsavedchangeWindow : WinWindow
    {
        
        public UIWarningUnsavedchangeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "**Warning - Unsaved changes**";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("**Warning - Unsaved changes**");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("**Warning - Unsaved changes**");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("**Warning - Unsaved changes**");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
}
