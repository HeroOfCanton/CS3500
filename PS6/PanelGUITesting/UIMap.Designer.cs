// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace PanelGUITesting
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Enter Doubles into spreadsheet
        /// </summary>
        public void EnterDoubles()
        {
            #region Variable Declarations
            WinEdit uITextBox3Edit = this.UIForm1Window.UITextBox3Window.UITextBox3Edit;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.EnterDoublesParams.UIForm1WindowExePath, this.EnterDoublesParams.UIForm1WindowAlternateExePath);

            // Type '5' in 'textBox3' text box
            uITextBox3Edit.Text = this.EnterDoublesParams.UITextBox3EditText;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.EnterDoublesParams.UITextBox3EditSendKeys, ModifierKeys.None);

            // Type '4' in 'textBox3' text box
            uITextBox3Edit.Text = this.EnterDoublesParams.UITextBox3EditText1;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.EnterDoublesParams.UITextBox3EditSendKeys1, ModifierKeys.None);

            // Type '3' in 'textBox3' text box
            uITextBox3Edit.Text = this.EnterDoublesParams.UITextBox3EditText2;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.EnterDoublesParams.UITextBox3EditSendKeys2, ModifierKeys.None);

            // Type '2' in 'textBox3' text box
            uITextBox3Edit.Text = this.EnterDoublesParams.UITextBox3EditText3;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.EnterDoublesParams.UITextBox3EditSendKeys3, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(51, 38));
        }
        
        /// <summary>
        /// Asserts that A1 is 5
        /// </summary>
        public void AssertDoubleA1()
        {
            #region Variable Declarations
            WinEdit uITextBox3Edit = this.UIForm1Window.UITextBox3Window.UITextBox3Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox3' text box equals '5'
            Assert.AreEqual(this.AssertDoubleA1ExpectedValues.UITextBox3EditText, uITextBox3Edit.Text, "A1 should be 5");
        }
        
        /// <summary>
        /// Assert that A1 value is 5
        /// </summary>
        public void AssertDoubleA1Value()
        {
            #region Variable Declarations
            WinText uICellValue5Text = this.UIForm1Window.UICellValue5Window.UICellValue5Text;
            #endregion

            // Verify that the 'DisplayText' property of 'Cell Value: 5' label equals 'Cell Value: 5'
            Assert.AreEqual(this.AssertDoubleA1ValueExpectedValues.UICellValue5TextDisplayText, uICellValue5Text.DisplayText, "A1 value should be 5");
        }
        
        /// <summary>
        /// AssertCurrentCell
        /// </summary>
        public void AssertCurrentCell()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(55, 57));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(50, 80));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(51, 102));
        }
        
        /// <summary>
        /// Assert that current cell is A4
        /// </summary>
        public void AssertCurrentCellA4()
        {
            #region Variable Declarations
            WinText uICurrentCellA4Text = this.UIForm1Window.UICurrentCellA4Window.UICurrentCellA4Text;
            #endregion

            // Verify that the 'DisplayText' property of 'Current Cell: A4' label equals 'Current Cell: A4'
            Assert.AreEqual(this.AssertCurrentCellA4ExpectedValues.UICurrentCellA4TextDisplayText, uICurrentCellA4Text.DisplayText, "Why is Current Cell not A4?");
        }
        
        /// <summary>
        /// Enter formulas into spreadsheet
        /// </summary>
        public void EnterFomulas()
        {
            #region Variable Declarations
            WinEdit uITextBox3Edit = this.UIForm1Window.UITextBox3Window.UITextBox3Edit;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.EnterFomulasParams.UIForm1WindowExePath, this.EnterFomulasParams.UIForm1WindowAlternateExePath);

            // Type '=B1 + 2' in 'textBox3' text box
            uITextBox3Edit.Text = this.EnterFomulasParams.UITextBox3EditText;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.EnterFomulasParams.UITextBox3EditSendKeys, ModifierKeys.None);

            // Type '=B1 + 2' in 'textBox3' text box
            uITextBox3Edit.Text = this.EnterFomulasParams.UITextBox3EditText1;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.EnterFomulasParams.UITextBox3EditSendKeys1, ModifierKeys.None);

            // Type '=A1 + 2' in 'textBox3' text box
            uITextBox3Edit.Text = this.EnterFomulasParams.UITextBox3EditText2;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.EnterFomulasParams.UITextBox3EditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(148, 38));

            // Type '10' in 'textBox3' text box
            uITextBox3Edit.Text = this.EnterFomulasParams.UITextBox3EditText3;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.EnterFomulasParams.UITextBox3EditSendKeys3, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(66, 38));
        }
        
        /// <summary>
        /// Assert Content of A1 to be correct formula
        /// </summary>
        public void AssertFormulaA1()
        {
            #region Variable Declarations
            WinEdit uITextBox3Edit = this.UIForm1Window.UITextBox3Window.UITextBox3Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox3' text box equals '=B1+2'
            Assert.AreEqual(this.AssertFormulaA1ExpectedValues.UITextBox3EditText, uITextBox3Edit.Text, "Why is A1 Content not =B1 + 2");
        }
        
        /// <summary>
        /// Assert cell Value after resolving Formula Errors
        /// </summary>
        public void AssertFormulaA1Value()
        {
            #region Variable Declarations
            WinText uICellValue12Text = this.UIForm1Window.UICellValue5Window.UICellValue12Text;
            #endregion

            // Verify that the 'DisplayText' property of 'Cell Value: 12' label equals 'Cell Value: 12'
            Assert.AreEqual(this.AssertFormulaA1ValueExpectedValues.UICellValue12TextDisplayText, uICellValue12Text.DisplayText, "Why is A1 value not 12?");
        }
        
        /// <summary>
        /// Move cursor to prepare for Formula testing
        /// </summary>
        public void MoveCursorToA3()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(133, 34));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(71, 60));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(68, 77));
        }
        
        /// <summary>
        /// Assert cell Content after resolving Formula Errors
        /// </summary>
        public void AssertFormulaA3()
        {
            #region Variable Declarations
            WinEdit uITextBox3Edit = this.UIForm1Window.UITextBox3Window.UITextBox3Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox3' text box equals '=A1+2'
            Assert.AreEqual(this.AssertFormulaA3ExpectedValues.UITextBox3EditText, uITextBox3Edit.Text, "Why is content not =A1 + 2?");
        }
        
        /// <summary>
        /// Assert cell Value after resolving Formula Errors
        /// </summary>
        public void AssertFormulaA3Value()
        {
            #region Variable Declarations
            WinText uICellValue14Text = this.UIForm1Window.UICellValue5Window.UICellValue14Text;
            #endregion

            // Verify that the 'DisplayText' property of 'Cell Value: 14' label equals 'Cell Value: 14'
            Assert.AreEqual(this.AssertFormulaA3ValueExpectedValues.UICellValue14TextDisplayText, uICellValue14Text.DisplayText, "Why is cell value not 14?");
        }
        
        /// <summary>
        /// Delete B1 to generate formula errors and prepare for testing
        /// </summary>
        public void DeleteB1andMoveCursor()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uITextBox3Edit = this.UIForm1Window.UITextBox3Window.UITextBox3Edit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(164, 35));

            // Type '' in 'textBox3' text box
            uITextBox3Edit.Text = this.DeleteB1andMoveCursorParams.UITextBox3EditText;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.DeleteB1andMoveCursorParams.UITextBox3EditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(87, 76));
        }
        
        /// <summary>
        /// Assert content is not formula error but that it still contains
        ///correct formula
        /// </summary>
        public void AssertFormulaA3_ContentFormulaError()
        {
            #region Variable Declarations
            WinEdit uITextBox3Edit = this.UIForm1Window.UITextBox3Window.UITextBox3Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox3' text box equals '=A1+2'
            Assert.AreEqual(this.AssertFormulaA3_ContentFormulaErrorExpectedValues.UITextBox3EditText, uITextBox3Edit.Text, "Why is content not =A1 + 2?");
        }
        
        /// <summary>
        /// Assert cell Value is FormulaError and that spreadsheet hasn't crashed
        /// </summary>
        public void AssertFormulaA3_ValueFormulaError()
        {
            #region Variable Declarations
            WinText uICellValueSpreadsheetText = this.UIForm1Window.UICellValue5Window.UICellValueSpreadsheetText;
            #endregion

            // Verify that the 'DisplayText' property of 'Cell Value: SpreadsheetUtilities.FormulaError' label equals 'Cell Value: SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.AssertFormulaA3_ValueFormulaErrorExpectedValues.UICellValueSpreadsheetTextDisplayText, uICellValueSpreadsheetText.DisplayText, "Why is content not formula error?");
        }
        
        /// <summary>
        /// Enter Help Menu
        /// </summary>
        public void HelpMenu_Help()
        {
            #region Variable Declarations
            WinMenuItem uIHelpMenuItem1 = this.UIForm1Window.UIMenuStrip1MenuBar.UIHelpMenuItem.UIHelpMenuItem1;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.HelpMenu_HelpParams.UIForm1WindowExePath, this.HelpMenu_HelpParams.UIForm1WindowAlternateExePath);

            // Click 'Help' -> 'Help' menu item
            Mouse.Click(uIHelpMenuItem1, new Point(50, 12));
        }
        
        /// <summary>
        /// Assert displayed help text matches
        /// </summary>
        public void AssertHelpText()
        {
            #region Variable Declarations
            WinText uIHerearesomehandyhelpText = this.UIHerearesomehandyhelpWindow.UIHerearesomehandyhelpText;
            #endregion

            // Verify that the 'DisplayText' property of 'Here are some handy helpers to make your spreadshe...' label equals 'Here are some handy helpers to make your spreadsheeting easier:
            //
            //- When typing contents in the box, you need to press ENTER to save it.
            //- Formulas recalculate automagically.
            //- Formulas must begin with an equals sign.
            //- The only valid operators are + - * / and ()
            //
            //                           Enjoy ~'
            Assert.AreEqual(this.AssertHelpTextExpectedValues.UIHerearesomehandyhelpTextDisplayText, uIHerearesomehandyhelpText.DisplayText, "Help text should match");
        }
        
        /// <summary>
        /// Enter help about menu
        /// </summary>
        public void EnterHelp_About()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinMenuItem uIAboutMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIHelpMenuItem.UIAboutMenuItem;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(30, 11));

            // Click 'Help' -> 'About' menu item
            Mouse.Click(uIAboutMenuItem, new Point(40, 10));
        }
        
        /// <summary>
        /// Assert displayed Help - About text matches
        /// </summary>
        public void AssertHelpText_About()
        {
            #region Variable Declarations
            WinText uIRyanWelling1152014LiText = this.UIRyanWelling1152014LiWindow.UIRyanWelling1152014LiText;
            #endregion

            // Verify that the 'DisplayText' property of 'Ryan Welling 11/5/2014 Like this program? Donate b...' label equals 'Ryan Welling
            //11/5/2014
            //
            //Like this program?  Donate bitcoin to keep improvements coming:
            //15nZNqEP16wu9hQcDJ3mf3rqq6Ct8kno12'
            Assert.AreEqual(this.AssertHelpText_AboutExpectedValues.UIRyanWelling1152014LiTextDisplayText, uIRyanWelling1152014LiText.DisplayText, "Why does about text not match?");
        }
        
        /// <summary>
        /// Enter Help - Extra menu
        /// </summary>
        public void EnterHelp_Extra()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinMenuItem uIExtraFeaturesMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIHelpMenuItem.UIExtraFeaturesMenuItem;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(46, 12));

            // Click 'Help' -> 'Extra Features' menu item
            Mouse.Click(uIExtraFeaturesMenuItem, new Point(38, 9));
        }
        
        /// <summary>
        /// Assert displayed extra text matches
        /// </summary>
        public void AssertHelpText_Extra()
        {
            #region Variable Declarations
            WinText uIWhenyoupressEnteryouText = this.UIWhenyoupressEnteryouWindow.UIWhenyoupressEnteryouText;
            #endregion

            // Verify that the 'DisplayText' property of 'When you press Enter, you are moved down a cell li...' label equals 'When you press Enter, you are moved down a cell like in Excel
            //
            //I also added shortcuts to most of the menu items'
            Assert.AreEqual(this.AssertHelpText_ExtraExpectedValues.UIWhenyoupressEnteryouTextDisplayText, uIWhenyoupressEnteryouText.DisplayText, "why does text not match?");
        }
        
        /// <summary>
        /// setup for testing save method
        /// </summary>
        public void SaveMethod()
        {
            #region Variable Declarations
            WinWindow uITextBox3Window = this.UIForm1Window.UIForm1Client.UITextBox3Window;
            WinEdit uITextBox3Edit = this.UIForm1Window.UITextBox3Window.UITextBox3Edit;
            WinMenuItem uISaveMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinMenuItem uIOpenMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.SaveMethodParams.UIForm1WindowExePath, this.SaveMethodParams.UIForm1WindowAlternateExePath);

            // Click 'textBox3' window
            Mouse.Click(uITextBox3Window, new Point(37, 1));

            // Type '5' in 'textBox3' text box
            uITextBox3Edit.Text = this.SaveMethodParams.UITextBox3EditText;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.SaveMethodParams.UITextBox3EditSendKeys, ModifierKeys.None);

            // Type '4' in 'textBox3' text box
            uITextBox3Edit.Text = this.SaveMethodParams.UITextBox3EditText1;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.SaveMethodParams.UITextBox3EditSendKeys1, ModifierKeys.None);

            // Type '3' in 'textBox3' text box
            uITextBox3Edit.Text = this.SaveMethodParams.UITextBox3EditText2;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.SaveMethodParams.UITextBox3EditSendKeys2, ModifierKeys.None);

            // Type '2' in 'textBox3' text box
            uITextBox3Edit.Text = this.SaveMethodParams.UITextBox3EditText3;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.SaveMethodParams.UITextBox3EditSendKeys3, ModifierKeys.None);

            // Type '1' in 'textBox3' text box
            uITextBox3Edit.Text = this.SaveMethodParams.UITextBox3EditText4;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.SaveMethodParams.UITextBox3EditSendKeys4, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(45, 8));

            // Select 'test1' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveMethodParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(18, 13));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(34, 8));
        }
        
        /// <summary>
        /// make sure test1 was created
        /// </summary>
        public void AssertSave_Test1()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITest1sprdListItem.UINameEdit;
            #endregion

            // Verify that the 'Text' property of 'Name' text box equals 'test1.sprd'
            Assert.AreEqual(this.AssertSave_Test1ExpectedValues.UINameEditText, uINameEdit.Text, "why no test1?");
        }
        
        /// <summary>
        /// setup for open testing
        /// </summary>
        public void OpenMethod()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UIOpenWindow.UICancelWindow.UICancelButton;
            WinMenuItem uINewMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIOpenMenuItem = this.UIForm1Window1.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITest1sprdListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window1.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(25, 11));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(42, 13));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(38, 9));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(66, 8));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(62, 9));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(73, 38));
        }
        
        /// <summary>
        /// Assert that after opening file, A1 is still 5
        /// </summary>
        public void AssertOpen_A1Content()
        {
            #region Variable Declarations
            WinEdit uITextBox3Edit = this.UIForm1Window1.UITextBox3Window.UITextBox3Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox3' text box equals '5'
            Assert.AreEqual(this.AssertOpen_A1ContentExpectedValues.UITextBox3EditText, uITextBox3Edit.Text, "why not 5");
        }
        
        /// <summary>
        /// Assert that after opening A1 value is still 5
        /// </summary>
        public void AssertOpen_A1Value()
        {
            #region Variable Declarations
            WinText uICellValue5Text = this.UIForm1Window1.UICellValue5Window.UICellValue5Text;
            #endregion

            // Verify that the 'DisplayText' property of 'Cell Value: 5' label equals 'Cell Value: 5'
            Assert.AreEqual(this.AssertOpen_A1ValueExpectedValues.UICellValue5TextDisplayText, uICellValue5Text.DisplayText, "why not 5");
        }
        
        /// <summary>
        /// Open_SaveMethod - Use 'Open_SaveMethodParams' to pass parameters into this method.
        /// </summary>
        public void Open_SaveMethod()
        {
            #region Variable Declarations
            WinEdit uITextBox3Edit = this.UIForm1Window.UITextBox3Window.UITextBox3Edit;
            WinMenuItem uISaveMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinMenuItem uINewMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIOpenMenuItem = this.UIForm1Window1.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinWindow uIOpenWindow = this.UIOpenWindow;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITest2sprdListItem.UINameEdit;
            WinComboBox uIFilenameComboBox1 = this.UIOpenWindow.UIItemWindow1.UIFilenameComboBox;
            WinButton uIOpenButton = this.UIOpenWindow.UIOpenWindow1.UIOpenButton;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window1.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.Open_SaveMethodParams.UIForm1WindowExePath, this.Open_SaveMethodParams.UIForm1WindowAlternateExePath);

            // Type '5' in 'textBox3' text box
            uITextBox3Edit.Text = this.Open_SaveMethodParams.UITextBox3EditText;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.Open_SaveMethodParams.UITextBox3EditSendKeys, ModifierKeys.None);

            // Type '4' in 'textBox3' text box
            uITextBox3Edit.Text = this.Open_SaveMethodParams.UITextBox3EditText1;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.Open_SaveMethodParams.UITextBox3EditSendKeys1, ModifierKeys.None);

            // Type '3' in 'textBox3' text box
            uITextBox3Edit.Text = this.Open_SaveMethodParams.UITextBox3EditText2;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.Open_SaveMethodParams.UITextBox3EditSendKeys2, ModifierKeys.None);

            // Type '2' in 'textBox3' text box
            uITextBox3Edit.Text = this.Open_SaveMethodParams.UITextBox3EditText3;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.Open_SaveMethodParams.UITextBox3EditSendKeys3, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(50, 5));

            // Select 'test2' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.Open_SaveMethodParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(26, 10));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(34, 13));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(51, 13));

            // Click 'Open' window
            Mouse.Click(uIOpenWindow, new Point(950, 206));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(60, 9));

            // Select 'test2.sprd' in 'File name:' combo box
            uIFilenameComboBox1.EditableItem = this.Open_SaveMethodParams.UIFilenameComboBoxEditableItem1;

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(36, 16));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(77, 38));
        }
        
        /// <summary>
        /// assert that a1 value after save and open is the same
        /// </summary>
        public void AssertSaveOpen_A1Value()
        {
            #region Variable Declarations
            WinText uICellValue5Text = this.UIForm1Window1.UICellValue5Window.UICellValue5Text;
            #endregion

            // Verify that the 'DisplayText' property of 'Cell Value: 5' label equals 'Cell Value: 5'
            Assert.AreEqual(this.AssertSaveOpen_A1ValueExpectedValues.UICellValue5TextDisplayText, uICellValue5Text.DisplayText, "why not 5");
        }
        
        /// <summary>
        /// assert that a1 content is the same after save and open
        /// </summary>
        public void AssertSaveOpen_A1Content()
        {
            #region Variable Declarations
            WinEdit uITextBox3Edit = this.UIForm1Window1.UITextBox3Window.UITextBox3Edit;
            #endregion

            // Verify that the 'Text' property of 'textBox3' text box equals '5'
            Assert.AreEqual(this.AssertSaveOpen_A1ContentExpectedValues.UITextBox3EditText, uITextBox3Edit.Text, "why no 5");
        }
        
        /// <summary>
        /// OutOfRangeMethod - Use 'OutOfRangeMethodParams' to pass parameters into this method.
        /// </summary>
        public void OutOfRangeMethod()
        {
            #region Variable Declarations
            WinEdit uITextBox3Edit = this.UIForm1Window.UITextBox3Window.UITextBox3Edit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.OutOfRangeMethodParams.UIForm1WindowExePath, this.OutOfRangeMethodParams.UIForm1WindowAlternateExePath);

            // Type '=a104' in 'textBox3' text box
            uITextBox3Edit.Text = this.OutOfRangeMethodParams.UITextBox3EditText;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.OutOfRangeMethodParams.UITextBox3EditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// assert that entered content is out of range
        /// </summary>
        public void AssertOutOfRange()
        {
            #region Variable Declarations
            WinText uIEnteredcellisoutofraText = this.UIEnteredcellisoutofraWindow.UIEnteredcellisoutofraText;
            #endregion

            // Verify that the 'DisplayText' property of 'Entered cell is out of range' label equals 'Entered cell is out of range'
            Assert.AreEqual(this.AssertOutOfRangeExpectedValues.UIEnteredcellisoutofraTextDisplayText, uIEnteredcellisoutofraText.DisplayText, "why not error");
        }
        
        /// <summary>
        /// setup for exit testing
        /// </summary>
        public void ExitMethod()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIItemWindow.UIItemWindow1.UIItemTitleBar.UICloseButton;
            WinEdit uITextBox3Edit = this.UIForm1Window.UITextBox3Window.UITextBox3Edit;
            WinMenuItem uIExitMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UIExitMenuItem;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 8));

            // Type '1' in 'textBox3' text box
            uITextBox3Edit.Text = this.ExitMethodParams.UITextBox3EditText;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.ExitMethodParams.UITextBox3EditSendKeys, ModifierKeys.None);

            // Type '2' in 'textBox3' text box
            uITextBox3Edit.Text = this.ExitMethodParams.UITextBox3EditText1;

            // Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, this.ExitMethodParams.UITextBox3EditSendKeys1, ModifierKeys.None);

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(35, 10));
        }
        
        /// <summary>
        /// assert that on exit there is a save dialogue
        /// </summary>
        public void AssertExitSave()
        {
            #region Variable Declarations
            WinText uIDoyouwanttosavebeforText = this.UIWarningUnsavedchangeWindow.UIDoyouwanttosavebeforWindow.UIDoyouwanttosavebeforText;
            #endregion

            // Verify that the 'DisplayText' property of 'Do you want to save before closing?' label equals 'Do you want to save before closing?'
            Assert.AreEqual(this.AssertExitSaveExpectedValues.UIDoyouwanttosavebeforTextDisplayText, uIDoyouwanttosavebeforText.DisplayText, "why no exit");
        }
        
        /// <summary>
        /// ExitSaveMethod - Use 'ExitSaveMethodParams' to pass parameters into this method.
        /// </summary>
        public void ExitSaveMethod()
        {
            #region Variable Declarations
            WinButton uIYesButton = this.UIWarningUnsavedchangeWindow.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(44, 12));

            // Select 'test4' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.ExitSaveMethodParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(27, 17));
        }
        
        #region Properties
        public virtual EnterDoublesParams EnterDoublesParams
        {
            get
            {
                if ((this.mEnterDoublesParams == null))
                {
                    this.mEnterDoublesParams = new EnterDoublesParams();
                }
                return this.mEnterDoublesParams;
            }
        }
        
        public virtual AssertDoubleA1ExpectedValues AssertDoubleA1ExpectedValues
        {
            get
            {
                if ((this.mAssertDoubleA1ExpectedValues == null))
                {
                    this.mAssertDoubleA1ExpectedValues = new AssertDoubleA1ExpectedValues();
                }
                return this.mAssertDoubleA1ExpectedValues;
            }
        }
        
        public virtual AssertDoubleA1ValueExpectedValues AssertDoubleA1ValueExpectedValues
        {
            get
            {
                if ((this.mAssertDoubleA1ValueExpectedValues == null))
                {
                    this.mAssertDoubleA1ValueExpectedValues = new AssertDoubleA1ValueExpectedValues();
                }
                return this.mAssertDoubleA1ValueExpectedValues;
            }
        }
        
        public virtual AssertCurrentCellA4ExpectedValues AssertCurrentCellA4ExpectedValues
        {
            get
            {
                if ((this.mAssertCurrentCellA4ExpectedValues == null))
                {
                    this.mAssertCurrentCellA4ExpectedValues = new AssertCurrentCellA4ExpectedValues();
                }
                return this.mAssertCurrentCellA4ExpectedValues;
            }
        }
        
        public virtual EnterFomulasParams EnterFomulasParams
        {
            get
            {
                if ((this.mEnterFomulasParams == null))
                {
                    this.mEnterFomulasParams = new EnterFomulasParams();
                }
                return this.mEnterFomulasParams;
            }
        }
        
        public virtual AssertFormulaA1ExpectedValues AssertFormulaA1ExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaA1ExpectedValues == null))
                {
                    this.mAssertFormulaA1ExpectedValues = new AssertFormulaA1ExpectedValues();
                }
                return this.mAssertFormulaA1ExpectedValues;
            }
        }
        
        public virtual AssertFormulaA1ValueExpectedValues AssertFormulaA1ValueExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaA1ValueExpectedValues == null))
                {
                    this.mAssertFormulaA1ValueExpectedValues = new AssertFormulaA1ValueExpectedValues();
                }
                return this.mAssertFormulaA1ValueExpectedValues;
            }
        }
        
        public virtual AssertFormulaA3ExpectedValues AssertFormulaA3ExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaA3ExpectedValues == null))
                {
                    this.mAssertFormulaA3ExpectedValues = new AssertFormulaA3ExpectedValues();
                }
                return this.mAssertFormulaA3ExpectedValues;
            }
        }
        
        public virtual AssertFormulaA3ValueExpectedValues AssertFormulaA3ValueExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaA3ValueExpectedValues == null))
                {
                    this.mAssertFormulaA3ValueExpectedValues = new AssertFormulaA3ValueExpectedValues();
                }
                return this.mAssertFormulaA3ValueExpectedValues;
            }
        }
        
        public virtual DeleteB1andMoveCursorParams DeleteB1andMoveCursorParams
        {
            get
            {
                if ((this.mDeleteB1andMoveCursorParams == null))
                {
                    this.mDeleteB1andMoveCursorParams = new DeleteB1andMoveCursorParams();
                }
                return this.mDeleteB1andMoveCursorParams;
            }
        }
        
        public virtual AssertFormulaA3_ContentFormulaErrorExpectedValues AssertFormulaA3_ContentFormulaErrorExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaA3_ContentFormulaErrorExpectedValues == null))
                {
                    this.mAssertFormulaA3_ContentFormulaErrorExpectedValues = new AssertFormulaA3_ContentFormulaErrorExpectedValues();
                }
                return this.mAssertFormulaA3_ContentFormulaErrorExpectedValues;
            }
        }
        
        public virtual AssertFormulaA3_ValueFormulaErrorExpectedValues AssertFormulaA3_ValueFormulaErrorExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaA3_ValueFormulaErrorExpectedValues == null))
                {
                    this.mAssertFormulaA3_ValueFormulaErrorExpectedValues = new AssertFormulaA3_ValueFormulaErrorExpectedValues();
                }
                return this.mAssertFormulaA3_ValueFormulaErrorExpectedValues;
            }
        }
        
        public virtual HelpMenu_HelpParams HelpMenu_HelpParams
        {
            get
            {
                if ((this.mHelpMenu_HelpParams == null))
                {
                    this.mHelpMenu_HelpParams = new HelpMenu_HelpParams();
                }
                return this.mHelpMenu_HelpParams;
            }
        }
        
        public virtual AssertHelpTextExpectedValues AssertHelpTextExpectedValues
        {
            get
            {
                if ((this.mAssertHelpTextExpectedValues == null))
                {
                    this.mAssertHelpTextExpectedValues = new AssertHelpTextExpectedValues();
                }
                return this.mAssertHelpTextExpectedValues;
            }
        }
        
        public virtual AssertHelpText_AboutExpectedValues AssertHelpText_AboutExpectedValues
        {
            get
            {
                if ((this.mAssertHelpText_AboutExpectedValues == null))
                {
                    this.mAssertHelpText_AboutExpectedValues = new AssertHelpText_AboutExpectedValues();
                }
                return this.mAssertHelpText_AboutExpectedValues;
            }
        }
        
        public virtual AssertHelpText_ExtraExpectedValues AssertHelpText_ExtraExpectedValues
        {
            get
            {
                if ((this.mAssertHelpText_ExtraExpectedValues == null))
                {
                    this.mAssertHelpText_ExtraExpectedValues = new AssertHelpText_ExtraExpectedValues();
                }
                return this.mAssertHelpText_ExtraExpectedValues;
            }
        }
        
        public virtual SaveMethodParams SaveMethodParams
        {
            get
            {
                if ((this.mSaveMethodParams == null))
                {
                    this.mSaveMethodParams = new SaveMethodParams();
                }
                return this.mSaveMethodParams;
            }
        }
        
        public virtual AssertSave_Test1ExpectedValues AssertSave_Test1ExpectedValues
        {
            get
            {
                if ((this.mAssertSave_Test1ExpectedValues == null))
                {
                    this.mAssertSave_Test1ExpectedValues = new AssertSave_Test1ExpectedValues();
                }
                return this.mAssertSave_Test1ExpectedValues;
            }
        }
        
        public virtual AssertOpen_A1ContentExpectedValues AssertOpen_A1ContentExpectedValues
        {
            get
            {
                if ((this.mAssertOpen_A1ContentExpectedValues == null))
                {
                    this.mAssertOpen_A1ContentExpectedValues = new AssertOpen_A1ContentExpectedValues();
                }
                return this.mAssertOpen_A1ContentExpectedValues;
            }
        }
        
        public virtual AssertOpen_A1ValueExpectedValues AssertOpen_A1ValueExpectedValues
        {
            get
            {
                if ((this.mAssertOpen_A1ValueExpectedValues == null))
                {
                    this.mAssertOpen_A1ValueExpectedValues = new AssertOpen_A1ValueExpectedValues();
                }
                return this.mAssertOpen_A1ValueExpectedValues;
            }
        }
        
        public virtual Open_SaveMethodParams Open_SaveMethodParams
        {
            get
            {
                if ((this.mOpen_SaveMethodParams == null))
                {
                    this.mOpen_SaveMethodParams = new Open_SaveMethodParams();
                }
                return this.mOpen_SaveMethodParams;
            }
        }
        
        public virtual AssertSaveOpen_A1ValueExpectedValues AssertSaveOpen_A1ValueExpectedValues
        {
            get
            {
                if ((this.mAssertSaveOpen_A1ValueExpectedValues == null))
                {
                    this.mAssertSaveOpen_A1ValueExpectedValues = new AssertSaveOpen_A1ValueExpectedValues();
                }
                return this.mAssertSaveOpen_A1ValueExpectedValues;
            }
        }
        
        public virtual AssertSaveOpen_A1ContentExpectedValues AssertSaveOpen_A1ContentExpectedValues
        {
            get
            {
                if ((this.mAssertSaveOpen_A1ContentExpectedValues == null))
                {
                    this.mAssertSaveOpen_A1ContentExpectedValues = new AssertSaveOpen_A1ContentExpectedValues();
                }
                return this.mAssertSaveOpen_A1ContentExpectedValues;
            }
        }
        
        public virtual OutOfRangeMethodParams OutOfRangeMethodParams
        {
            get
            {
                if ((this.mOutOfRangeMethodParams == null))
                {
                    this.mOutOfRangeMethodParams = new OutOfRangeMethodParams();
                }
                return this.mOutOfRangeMethodParams;
            }
        }
        
        public virtual AssertOutOfRangeExpectedValues AssertOutOfRangeExpectedValues
        {
            get
            {
                if ((this.mAssertOutOfRangeExpectedValues == null))
                {
                    this.mAssertOutOfRangeExpectedValues = new AssertOutOfRangeExpectedValues();
                }
                return this.mAssertOutOfRangeExpectedValues;
            }
        }
        
        public virtual ExitMethodParams ExitMethodParams
        {
            get
            {
                if ((this.mExitMethodParams == null))
                {
                    this.mExitMethodParams = new ExitMethodParams();
                }
                return this.mExitMethodParams;
            }
        }
        
        public virtual AssertExitSaveExpectedValues AssertExitSaveExpectedValues
        {
            get
            {
                if ((this.mAssertExitSaveExpectedValues == null))
                {
                    this.mAssertExitSaveExpectedValues = new AssertExitSaveExpectedValues();
                }
                return this.mAssertExitSaveExpectedValues;
            }
        }
        
        public virtual ExitSaveMethodParams ExitSaveMethodParams
        {
            get
            {
                if ((this.mExitSaveMethodParams == null))
                {
                    this.mExitSaveMethodParams = new ExitSaveMethodParams();
                }
                return this.mExitSaveMethodParams;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }
        
        public UIHerearesomehandyhelpWindow UIHerearesomehandyhelpWindow
        {
            get
            {
                if ((this.mUIHerearesomehandyhelpWindow == null))
                {
                    this.mUIHerearesomehandyhelpWindow = new UIHerearesomehandyhelpWindow();
                }
                return this.mUIHerearesomehandyhelpWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIRyanWelling1152014LiWindow UIRyanWelling1152014LiWindow
        {
            get
            {
                if ((this.mUIRyanWelling1152014LiWindow == null))
                {
                    this.mUIRyanWelling1152014LiWindow = new UIRyanWelling1152014LiWindow();
                }
                return this.mUIRyanWelling1152014LiWindow;
            }
        }
        
        public UIWhenyoupressEnteryouWindow UIWhenyoupressEnteryouWindow
        {
            get
            {
                if ((this.mUIWhenyoupressEnteryouWindow == null))
                {
                    this.mUIWhenyoupressEnteryouWindow = new UIWhenyoupressEnteryouWindow();
                }
                return this.mUIWhenyoupressEnteryouWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIForm1Window1 UIForm1Window1
        {
            get
            {
                if ((this.mUIForm1Window1 == null))
                {
                    this.mUIForm1Window1 = new UIForm1Window1();
                }
                return this.mUIForm1Window1;
            }
        }
        
        public UIEnteredcellisoutofraWindow UIEnteredcellisoutofraWindow
        {
            get
            {
                if ((this.mUIEnteredcellisoutofraWindow == null))
                {
                    this.mUIEnteredcellisoutofraWindow = new UIEnteredcellisoutofraWindow();
                }
                return this.mUIEnteredcellisoutofraWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIWarningUnsavedchangeWindow UIWarningUnsavedchangeWindow
        {
            get
            {
                if ((this.mUIWarningUnsavedchangeWindow == null))
                {
                    this.mUIWarningUnsavedchangeWindow = new UIWarningUnsavedchangeWindow();
                }
                return this.mUIWarningUnsavedchangeWindow;
            }
        }
        #endregion
        
        #region Fields
        private EnterDoublesParams mEnterDoublesParams;
        
        private AssertDoubleA1ExpectedValues mAssertDoubleA1ExpectedValues;
        
        private AssertDoubleA1ValueExpectedValues mAssertDoubleA1ValueExpectedValues;
        
        private AssertCurrentCellA4ExpectedValues mAssertCurrentCellA4ExpectedValues;
        
        private EnterFomulasParams mEnterFomulasParams;
        
        private AssertFormulaA1ExpectedValues mAssertFormulaA1ExpectedValues;
        
        private AssertFormulaA1ValueExpectedValues mAssertFormulaA1ValueExpectedValues;
        
        private AssertFormulaA3ExpectedValues mAssertFormulaA3ExpectedValues;
        
        private AssertFormulaA3ValueExpectedValues mAssertFormulaA3ValueExpectedValues;
        
        private DeleteB1andMoveCursorParams mDeleteB1andMoveCursorParams;
        
        private AssertFormulaA3_ContentFormulaErrorExpectedValues mAssertFormulaA3_ContentFormulaErrorExpectedValues;
        
        private AssertFormulaA3_ValueFormulaErrorExpectedValues mAssertFormulaA3_ValueFormulaErrorExpectedValues;
        
        private HelpMenu_HelpParams mHelpMenu_HelpParams;
        
        private AssertHelpTextExpectedValues mAssertHelpTextExpectedValues;
        
        private AssertHelpText_AboutExpectedValues mAssertHelpText_AboutExpectedValues;
        
        private AssertHelpText_ExtraExpectedValues mAssertHelpText_ExtraExpectedValues;
        
        private SaveMethodParams mSaveMethodParams;
        
        private AssertSave_Test1ExpectedValues mAssertSave_Test1ExpectedValues;
        
        private AssertOpen_A1ContentExpectedValues mAssertOpen_A1ContentExpectedValues;
        
        private AssertOpen_A1ValueExpectedValues mAssertOpen_A1ValueExpectedValues;
        
        private Open_SaveMethodParams mOpen_SaveMethodParams;
        
        private AssertSaveOpen_A1ValueExpectedValues mAssertSaveOpen_A1ValueExpectedValues;
        
        private AssertSaveOpen_A1ContentExpectedValues mAssertSaveOpen_A1ContentExpectedValues;
        
        private OutOfRangeMethodParams mOutOfRangeMethodParams;
        
        private AssertOutOfRangeExpectedValues mAssertOutOfRangeExpectedValues;
        
        private ExitMethodParams mExitMethodParams;
        
        private AssertExitSaveExpectedValues mAssertExitSaveExpectedValues;
        
        private ExitSaveMethodParams mExitSaveMethodParams;
        
        private UIForm1Window mUIForm1Window;
        
        private UIHerearesomehandyhelpWindow mUIHerearesomehandyhelpWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UIRyanWelling1152014LiWindow mUIRyanWelling1152014LiWindow;
        
        private UIWhenyoupressEnteryouWindow mUIWhenyoupressEnteryouWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIForm1Window1 mUIForm1Window1;
        
        private UIEnteredcellisoutofraWindow mUIEnteredcellisoutofraWindow;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIWarningUnsavedchangeWindow mUIWarningUnsavedchangeWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterDoubles'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class EnterDoublesParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Ryan\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '5' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '4' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText1 = "4";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText3 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDoubleA1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertDoubleA1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox3' text box equals '5'
        /// </summary>
        public string UITextBox3EditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDoubleA1Value'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertDoubleA1ValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Cell Value: 5' label equals 'Cell Value: 5'
        /// </summary>
        public string UICellValue5TextDisplayText = "Cell Value: 5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCurrentCellA4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertCurrentCellA4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Current Cell: A4' label equals 'Current Cell: A4'
        /// </summary>
        public string UICurrentCellA4TextDisplayText = "Current Cell: A4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterFomulas'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class EnterFomulasParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Ryan\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=B1 + 2' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText = "=B1 + 2";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=B1 + 2' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText1 = "=B1 + 2";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1 + 2' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText2 = "=A1 + 2";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '10' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText3 = "10";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormulaA1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertFormulaA1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox3' text box equals '=B1+2'
        /// </summary>
        public string UITextBox3EditText = "=B1+2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormulaA1Value'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertFormulaA1ValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Cell Value: 12' label equals 'Cell Value: 12'
        /// </summary>
        public string UICellValue12TextDisplayText = "Cell Value: 12";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormulaA3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertFormulaA3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox3' text box equals '=A1+2'
        /// </summary>
        public string UITextBox3EditText = "=A1+2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormulaA3Value'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertFormulaA3ValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Cell Value: 14' label equals 'Cell Value: 14'
        /// </summary>
        public string UICellValue14TextDisplayText = "Cell Value: 14";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeleteB1andMoveCursor'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class DeleteB1andMoveCursorParams
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText = "";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormulaA3_ContentFormulaError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertFormulaA3_ContentFormulaErrorExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox3' text box equals '=A1+2'
        /// </summary>
        public string UITextBox3EditText = "=A1+2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormulaA3_ValueFormulaError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertFormulaA3_ValueFormulaErrorExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Cell Value: SpreadsheetUtilities.FormulaError' label equals 'Cell Value: SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UICellValueSpreadsheetTextDisplayText = "Cell Value: SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'HelpMenu_Help'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class HelpMenu_HelpParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Ryan\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertHelpText'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertHelpTextExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Here are some handy helpers to make your spreadshe...' label equals 'Here are some handy helpers to make your spreadsheeting easier:
        ///
        ///- When typing contents in the box, you need to press ENTER to save it.
        ///- Formulas recalculate automagically.
        ///- Formulas must begin with an equals sign.
        ///- The only valid operators are + - * / and ()
        ///
        ///                           Enjoy ~'
        /// </summary>
        public string UIHerearesomehandyhelpTextDisplayText = @"Here are some handy helpers to make your spreadsheeting easier:

- When typing contents in the box, you need to press ENTER to save it.
- Formulas recalculate automagically.
- Formulas must begin with an equals sign.
- The only valid operators are + - * / and ()

                           Enjoy ~";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertHelpText_About'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertHelpText_AboutExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Ryan Welling 11/5/2014 Like this program? Donate b...' label equals 'Ryan Welling
        ///11/5/2014
        ///
        ///Like this program?  Donate bitcoin to keep improvements coming:
        ///15nZNqEP16wu9hQcDJ3mf3rqq6Ct8kno12'
        /// </summary>
        public string UIRyanWelling1152014LiTextDisplayText = "Ryan Welling\n11/5/2014\n\nLike this program?  Donate bitcoin to keep improvements c" +
            "oming:\n15nZNqEP16wu9hQcDJ3mf3rqq6Ct8kno12";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertHelpText_Extra'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertHelpText_ExtraExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'When you press Enter, you are moved down a cell li...' label equals 'When you press Enter, you are moved down a cell like in Excel
        ///
        ///I also added shortcuts to most of the menu items'
        /// </summary>
        public string UIWhenyoupressEnteryouTextDisplayText = "When you press Enter, you are moved down a cell like in Excel\n\nI also added short" +
            "cuts to most of the menu items";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class SaveMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Ryan\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '5' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '4' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText1 = "4";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText3 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '1' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText4 = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Select 'test1' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSave_Test1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertSave_Test1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Name' text box equals 'test1.sprd'
        /// </summary>
        public string UINameEditText = "test1.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOpen_A1Content'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertOpen_A1ContentExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox3' text box equals '5'
        /// </summary>
        public string UITextBox3EditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOpen_A1Value'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertOpen_A1ValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Cell Value: 5' label equals 'Cell Value: 5'
        /// </summary>
        public string UICellValue5TextDisplayText = "Cell Value: 5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open_SaveMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class Open_SaveMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Ryan\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '5' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '4' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText1 = "4";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '3' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText2 = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText3 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Select 'test2' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test2";
        
        /// <summary>
        /// Select 'test2.sprd' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "test2.sprd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSaveOpen_A1Value'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertSaveOpen_A1ValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Cell Value: 5' label equals 'Cell Value: 5'
        /// </summary>
        public string UICellValue5TextDisplayText = "Cell Value: 5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSaveOpen_A1Content'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertSaveOpen_A1ContentExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'textBox3' text box equals '5'
        /// </summary>
        public string UITextBox3EditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OutOfRangeMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class OutOfRangeMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Ryan\\Documents\\Visual Studio 2013\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\" +
            "SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '=a104' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText = "=a104";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOutOfRange'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertOutOfRangeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Entered cell is out of range' label equals 'Entered cell is out of range'
        /// </summary>
        public string UIEnteredcellisoutofraTextDisplayText = "Entered cell is out of range";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExitMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ExitMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '2' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox3' text box
        /// </summary>
        public string UITextBox3EditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertExitSave'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertExitSaveExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Do you want to save before closing?' label equals 'Do you want to save before closing?'
        /// </summary>
        public string UIDoyouwanttosavebeforTextDisplayText = "Do you want to save before closing?";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExitSaveMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class ExitSaveMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'test4' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test4";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UITextBox3Window UITextBox3Window
        {
            get
            {
                if ((this.mUITextBox3Window == null))
                {
                    this.mUITextBox3Window = new UITextBox3Window(this);
                }
                return this.mUITextBox3Window;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICellValue5Window UICellValue5Window
        {
            get
            {
                if ((this.mUICellValue5Window == null))
                {
                    this.mUICellValue5Window = new UICellValue5Window(this);
                }
                return this.mUICellValue5Window;
            }
        }
        
        public UICurrentCellA4Window UICurrentCellA4Window
        {
            get
            {
                if ((this.mUICurrentCellA4Window == null))
                {
                    this.mUICurrentCellA4Window = new UICurrentCellA4Window(this);
                }
                return this.mUICurrentCellA4Window;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIForm1Client UIForm1Client
        {
            get
            {
                if ((this.mUIForm1Client == null))
                {
                    this.mUIForm1Client = new UIForm1Client(this);
                }
                return this.mUIForm1Client;
            }
        }
        #endregion
        
        #region Fields
        private UITextBox3Window mUITextBox3Window;
        
        private UIItemWindow mUIItemWindow;
        
        private UICellValue5Window mUICellValue5Window;
        
        private UICurrentCellA4Window mUICurrentCellA4Window;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIForm1Client mUIForm1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITextBox3Window : WinWindow
    {
        
        public UITextBox3Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox3";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox3Edit
        {
            get
            {
                if ((this.mUITextBox3Edit == null))
                {
                    this.mUITextBox3Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox3Edit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUITextBox3Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox3Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICellValue5Window : WinWindow
    {
        
        public UICellValue5Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinText UICellValue5Text
        {
            get
            {
                if ((this.mUICellValue5Text == null))
                {
                    this.mUICellValue5Text = new WinText(this);
                    #region Search Criteria
                    this.mUICellValue5Text.SearchProperties[WinText.PropertyNames.Name] = "Cell Value: 5";
                    this.mUICellValue5Text.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellValue5Text;
            }
        }
        
        public WinText UICellValue12Text
        {
            get
            {
                if ((this.mUICellValue12Text == null))
                {
                    this.mUICellValue12Text = new WinText(this);
                    #region Search Criteria
                    this.mUICellValue12Text.SearchProperties[WinText.PropertyNames.Name] = "Cell Value: 12";
                    this.mUICellValue12Text.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellValue12Text;
            }
        }
        
        public WinText UICellValue14Text
        {
            get
            {
                if ((this.mUICellValue14Text == null))
                {
                    this.mUICellValue14Text = new WinText(this);
                    #region Search Criteria
                    this.mUICellValue14Text.SearchProperties[WinText.PropertyNames.Name] = "Cell Value: 14";
                    this.mUICellValue14Text.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellValue14Text;
            }
        }
        
        public WinText UICellValueSpreadsheetText
        {
            get
            {
                if ((this.mUICellValueSpreadsheetText == null))
                {
                    this.mUICellValueSpreadsheetText = new WinText(this);
                    #region Search Criteria
                    this.mUICellValueSpreadsheetText.SearchProperties[WinText.PropertyNames.Name] = "Cell Value: SpreadsheetUtilities.FormulaError";
                    this.mUICellValueSpreadsheetText.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellValueSpreadsheetText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUICellValue5Text;
        
        private WinText mUICellValue12Text;
        
        private WinText mUICellValue14Text;
        
        private WinText mUICellValueSpreadsheetText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICurrentCellA4Window : WinWindow
    {
        
        public UICurrentCellA4Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinText UICurrentCellA4Text
        {
            get
            {
                if ((this.mUICurrentCellA4Text == null))
                {
                    this.mUICurrentCellA4Text = new WinText(this);
                    #region Search Criteria
                    this.mUICurrentCellA4Text.SearchProperties[WinText.PropertyNames.Name] = "Current Cell: A4";
                    this.mUICurrentCellA4Text.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICurrentCellA4Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUICurrentCellA4Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHelpMenuItem mUIHelpMenuItem;
        
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIHelpMenuItem1
        {
            get
            {
                if ((this.mUIHelpMenuItem1 == null))
                {
                    this.mUIHelpMenuItem1 = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem1.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    this.mUIHelpMenuItem1.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHelpMenuItem1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIHelpMenuItem1.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIHelpMenuItem1;
            }
        }
        
        public WinMenuItem UIAboutMenuItem
        {
            get
            {
                if ((this.mUIAboutMenuItem == null))
                {
                    this.mUIAboutMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About";
                    this.mUIAboutMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIAboutMenuItem;
            }
        }
        
        public WinMenuItem UIExtraFeaturesMenuItem
        {
            get
            {
                if ((this.mUIExtraFeaturesMenuItem == null))
                {
                    this.mUIExtraFeaturesMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExtraFeaturesMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Extra Features";
                    this.mUIExtraFeaturesMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExtraFeaturesMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIExtraFeaturesMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIHelpMenuItem1;
        
        private WinMenuItem mUIAboutMenuItem;
        
        private WinMenuItem mUIExtraFeaturesMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIExitMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIForm1Client : WinClient
    {
        
        public UIForm1Client(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Form1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinWindow UITextBox3Window
        {
            get
            {
                if ((this.mUITextBox3Window == null))
                {
                    this.mUITextBox3Window = new WinWindow(this);
                    #region Search Criteria
                    this.mUITextBox3Window.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUITextBox3Window.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUITextBox3Window;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUITextBox3Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIHerearesomehandyhelpWindow : WinWindow
    {
        
        public UIHerearesomehandyhelpWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = @"Here are some handy helpers to make your spreadsheeting easier:

- When typing contents in the box, you need to press ENTER to save it.
- Formulas recalculate automagically.
- Formulas must begin with an equals sign.
- The only valid operators are + - * / and ()

                           Enjoy ~";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add(@"Here are some handy helpers to make your spreadsheeting easier:

- When typing contents in the box, you need to press ENTER to save it.
- Formulas recalculate automagically.
- Formulas must begin with an equals sign.
- The only valid operators are + - * / and ()

                           Enjoy ~");
            #endregion
        }
        
        #region Properties
        public WinText UIHerearesomehandyhelpText
        {
            get
            {
                if ((this.mUIHerearesomehandyhelpText == null))
                {
                    this.mUIHerearesomehandyhelpText = new WinText(this);
                    #region Search Criteria
                    this.mUIHerearesomehandyhelpText.SearchProperties[WinText.PropertyNames.Name] = @"Here are some handy helpers to make your spreadsheeting easier:- When typing contents in the box, you need to press ENTER to save it.- Formulas recalculate automagically.- Formulas must begin with an equals sign.- The only valid operators are + - * / and ()                           Enjoy ~";
                    this.mUIHerearesomehandyhelpText.WindowTitles.Add(@"Here are some handy helpers to make your spreadsheeting easier:

- When typing contents in the box, you need to press ENTER to save it.
- Formulas recalculate automagically.
- Formulas must begin with an equals sign.
- The only valid operators are + - * / and ()

                           Enjoy ~");
                    #endregion
                }
                return this.mUIHerearesomehandyhelpText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIHerearesomehandyhelpText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIRyanWelling1152014LiWindow : WinWindow
    {
        
        public UIRyanWelling1152014LiWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Ryan Welling\n11/5/2014\n\nLike this program?  Donate bitcoin to keep improvements c" +
                "oming:\n15nZNqEP16wu9hQcDJ3mf3rqq6Ct8kno12";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("Ryan Welling\n11/5/2014\n\nLike this program?  Donate bitcoin to keep improvements c" +
                    "oming:\n15nZNqEP16wu9hQcDJ3mf3rqq6Ct8kno12");
            #endregion
        }
        
        #region Properties
        public WinText UIRyanWelling1152014LiText
        {
            get
            {
                if ((this.mUIRyanWelling1152014LiText == null))
                {
                    this.mUIRyanWelling1152014LiText = new WinText(this);
                    #region Search Criteria
                    this.mUIRyanWelling1152014LiText.SearchProperties[WinText.PropertyNames.Name] = "Ryan Welling11/5/2014Like this program?  Donate bitcoin to keep improvements comi" +
                        "ng:15nZNqEP16wu9hQcDJ3mf3rqq6Ct8kno12";
                    this.mUIRyanWelling1152014LiText.WindowTitles.Add("Ryan Welling\n11/5/2014\n\nLike this program?  Donate bitcoin to keep improvements c" +
                            "oming:\n15nZNqEP16wu9hQcDJ3mf3rqq6Ct8kno12");
                    #endregion
                }
                return this.mUIRyanWelling1152014LiText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIRyanWelling1152014LiText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIWhenyoupressEnteryouWindow : WinWindow
    {
        
        public UIWhenyoupressEnteryouWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "When you press Enter, you are moved down a cell like in Excel\n\nI also added short" +
                "cuts to most of the menu items";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("When you press Enter, you are moved down a cell like in Excel\n\nI also added short" +
                    "cuts to most of the menu items");
            #endregion
        }
        
        #region Properties
        public WinText UIWhenyoupressEnteryouText
        {
            get
            {
                if ((this.mUIWhenyoupressEnteryouText == null))
                {
                    this.mUIWhenyoupressEnteryouText = new WinText(this);
                    #region Search Criteria
                    this.mUIWhenyoupressEnteryouText.SearchProperties[WinText.PropertyNames.Name] = "When you press Enter, you are moved down a cell like in ExcelI also added shortcu" +
                        "ts to most of the menu items";
                    this.mUIWhenyoupressEnteryouText.WindowTitles.Add("When you press Enter, you are moved down a cell like in Excel\n\nI also added short" +
                            "cuts to most of the menu items");
                    #endregion
                }
                return this.mUIWhenyoupressEnteryouText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIWhenyoupressEnteryouText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UICancelWindow mUICancelWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITest1sprdListItem UITest1sprdListItem
        {
            get
            {
                if ((this.mUITest1sprdListItem == null))
                {
                    this.mUITest1sprdListItem = new UITest1sprdListItem(this);
                }
                return this.mUITest1sprdListItem;
            }
        }
        
        public UITest2sprdListItem UITest2sprdListItem
        {
            get
            {
                if ((this.mUITest2sprdListItem == null))
                {
                    this.mUITest2sprdListItem = new UITest2sprdListItem(this);
                }
                return this.mUITest2sprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITest1sprdListItem mUITest1sprdListItem;
        
        private UITest2sprdListItem mUITest2sprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITest1sprdListItem : WinListItem
    {
        
        public UITest1sprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test1.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITest2sprdListItem : WinListItem
    {
        
        public UITest2sprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test2.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIForm1Window1 : WinWindow
    {
        
        public UIForm1Window1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UITextBox3Window1 UITextBox3Window
        {
            get
            {
                if ((this.mUITextBox3Window == null))
                {
                    this.mUITextBox3Window = new UITextBox3Window1(this);
                }
                return this.mUITextBox3Window;
            }
        }
        
        public UICellValue5Window1 UICellValue5Window
        {
            get
            {
                if ((this.mUICellValue5Window == null))
                {
                    this.mUICellValue5Window = new UICellValue5Window1(this);
                }
                return this.mUICellValue5Window;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UITextBox3Window1 mUITextBox3Window;
        
        private UICellValue5Window1 mUICellValue5Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UITextBox3Window1 : WinWindow
    {
        
        public UITextBox3Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox3";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox3Edit
        {
            get
            {
                if ((this.mUITextBox3Edit == null))
                {
                    this.mUITextBox3Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox3Edit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUITextBox3Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox3Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UICellValue5Window1 : WinWindow
    {
        
        public UICellValue5Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "label2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinText UICellValue5Text
        {
            get
            {
                if ((this.mUICellValue5Text == null))
                {
                    this.mUICellValue5Text = new WinText(this);
                    #region Search Criteria
                    this.mUICellValue5Text.SearchProperties[WinText.PropertyNames.Name] = "Cell Value: 5";
                    this.mUICellValue5Text.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellValue5Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUICellValue5Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIEnteredcellisoutofraWindow : WinWindow
    {
        
        public UIEnteredcellisoutofraWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Entered cell is out of range";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("Entered cell is out of range");
            #endregion
        }
        
        #region Properties
        public WinText UIEnteredcellisoutofraText
        {
            get
            {
                if ((this.mUIEnteredcellisoutofraText == null))
                {
                    this.mUIEnteredcellisoutofraText = new WinText(this);
                    #region Search Criteria
                    this.mUIEnteredcellisoutofraText.SearchProperties[WinText.PropertyNames.Name] = "Entered cell is out of range";
                    this.mUIEnteredcellisoutofraText.WindowTitles.Add("Entered cell is out of range");
                    #endregion
                }
                return this.mUIEnteredcellisoutofraText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIEnteredcellisoutofraText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow12 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            #endregion
        }
        
        #region Properties
        public UIItemTitleBar UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new UIItemTitleBar(this);
                }
                return this.mUIItemTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTitleBar mUIItemTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemTitleBar : WinTitleBar
    {
        
        public UIItemTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIWarningUnsavedchangeWindow : WinWindow
    {
        
        public UIWarningUnsavedchangeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "**Warning - Unsaved changes**";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("**Warning - Unsaved changes**");
            #endregion
        }
        
        #region Properties
        public UIDoyouwanttosavebeforWindow UIDoyouwanttosavebeforWindow
        {
            get
            {
                if ((this.mUIDoyouwanttosavebeforWindow == null))
                {
                    this.mUIDoyouwanttosavebeforWindow = new UIDoyouwanttosavebeforWindow(this);
                }
                return this.mUIDoyouwanttosavebeforWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDoyouwanttosavebeforWindow mUIDoyouwanttosavebeforWindow;
        
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIDoyouwanttosavebeforWindow : WinWindow
    {
        
        public UIDoyouwanttosavebeforWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("**Warning - Unsaved changes**");
            #endregion
        }
        
        #region Properties
        public WinText UIDoyouwanttosavebeforText
        {
            get
            {
                if ((this.mUIDoyouwanttosavebeforText == null))
                {
                    this.mUIDoyouwanttosavebeforText = new WinText(this);
                    #region Search Criteria
                    this.mUIDoyouwanttosavebeforText.SearchProperties[WinText.PropertyNames.Name] = "Do you want to save before closing?";
                    this.mUIDoyouwanttosavebeforText.WindowTitles.Add("**Warning - Unsaved changes**");
                    #endregion
                }
                return this.mUIDoyouwanttosavebeforText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIDoyouwanttosavebeforText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("**Warning - Unsaved changes**");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("**Warning - Unsaved changes**");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
}
